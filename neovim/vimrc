set nocompatible

" UTF-8 encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,latin1
scriptencoding utf-8
set nobomb

let mapleader=','
imap jk <esc>

set background=dark

set shell=zsh " use zsh for :term
set grepprg=rg\ --vimgrep " use ripgrep for :grep

" no swap files or backup files
set noswapfile
set nobackup
set nowritebackup

" allow hidden buffers for easier multi-file editing
set hidden

" detect plugins and indentation per filetype
filetype plugin indent on

" sensible split defaults
set splitbelow
set splitright

" no annoying bells
set noerrorbells
set visualbell

" highlight current line (not supported by alacritty, so need to do here)
set cursorline

" always show at least 1 line above/below cursor
set scrolloff=1

" disable word wrapping
set nowrap
set textwidth=0
set wrapmargin=0
set formatoptions-=t

" ignore case when searching lowercase
set ignorecase
set smartcase

" when a file has changed outside of vim, automatically read it again
set autoread

" always show sign column
set signcolumn=yes

" tame horizontal scroll
set sidescroll=1

" no double spaces after periods when joining lines
set nojoinspaces

" todos
imap <silent> <leader>t <esc>ATODO(karlhepler): 
nmap <silent> <leader>t :grep 'TODO\(karlhepler\):'<cr>:copen<cr>

" search highlighting off
nmap <silent> <leader><space> :nohlsearch<cr>

" reload current file
nmap <silent> <leader>f :e!<cr>

" comma + enter goes to insert mode
nnoremap ,<cr> A,<cr>

" highlight word without jump in normal mode
nmap <c-w><c-w> :keepjumps normal! mi*`i<cr>

" tame the half-page scroller
nmap <c-d> 5<c-e>5j
vmap <c-d> 5<c-e>5j
nmap <c-u> 5k5<c-y>
vmap <c-u> 5k5<c-y>

" quickfix mappings
nmap <up> :copen<cr>
nmap <down> :cclose<cr>
nmap <left> :cprevious<cr>
nmap <right> :cnext<cr>

" copy relative & absolute paths to system clipboard
nmap <silent> <LEADER>cf :let @+ = fnamemodify(expand('%'), ':~:.')<CR>
nmap <silent> <LEADER>cF :let @+ = expand("%:p")<CR>

" horizontal center to cursor position
nnoremap <silent> zm zszH

" open terminal at current buffer path
map <C-T> <ESC>:let $BUFPATH=expand('%:p:h')<CR>:terminal<CR>cd $BUFPATH && clear<CR>

" helpful split views
nmap <C-W>} =42>
nmap <C-W>{ =42<
nmap <C-W>O onH{l

" not quite high and low
noremap H 3H
noremap L 3L

" disable fancy cursor
set guicursor=

" vim fugitive mapping
" this has to be done here because plugins are loaded before extraConfig
nmap <leader>b :Buffers<cr>
imap <leader>b <esc>:Buffers<cr>
vmap <leader>b <esc>:Buffers<cr>

map <c-f> <esc>:Twilight<cr>

" Run :RustFmt when saving rust files
" Reference: https://github.com/rust-lang/rust.vim?tab=readme-ov-file#formatting-with-rustfmt
let g:rustfmt_autosave = 1

" Neovide options (check home.nix)
let g:neovide_cursor_animation_length = 0.05
let g:neovide_cursor_trail_size = 0.25
let g:neovide_cursor_vfx_mode = "pixiedust"

function! GitHubURL()
    let l:remote = substitute(system('git remote get-url origin'), '\n', '', 'g')
    let l:repo = substitute(l:remote, '.*github.com[:/]', '', '')
    let l:repo = substitute(l:repo, '.git$', '', '')
    let l:branch = substitute(system('git rev-parse --abbrev-ref HEAD'), '\n', '', 'g')
    let l:path = substitute(fnamemodify(expand('%'), ':~:.'), '\n', '', 'g')
    let l:line = substitute(line('.'), '\n', '', 'g')
    return printf('https://github.com/%s/blob/%s/%s#L%s', l:repo, l:branch, l:path, l:line)
endfunction

function! OpenInGitHub()
    let l:url = GitHubURL()
    " Escape # character in the URL to prevent substitution issues
    let l:url = substitute(l:url, '#', '\\#', 'g')
    execute 'silent !open ' . shellescape(l:url)
endfunction

function! CopyGitHubURL()
    let l:url = GitHubURL()
    let @+ = l:url
    echo "GitHub URL copied to clipboard: " . l:url
endfunction

nnoremap <leader>gho :call OpenInGitHub()<CR>
nnoremap <leader>ghc :call CopyGitHubURL()<CR>

" GitHub Copilot configuration
" Disable tab mapping for copilot
let g:copilot_no_tab_map = v:true
" Note: Ctrl+N mapping for smart completion is handled in lspconfig.lua

" RestoreCursor restores the last cursor position.
function! RestoreCursor()
		if line("\"") <= line("$")
				normal! g`"
				return 1
		endif
endfunction

augroup config
	autocmd!

	" jump to last cursor position on file load
  " also enable text dimming "focus mode"
	autocmd BufWinEnter * silent! call RestoreCursor()

	" force quickfix to always open full width
	autocmd FileType qf wincmd J
augroup end
